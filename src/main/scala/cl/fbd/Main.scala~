package cl.fbd

import scalanative.runtime.Intrinsics._
import scalanative.runtime.GC
import scalanative.native._
import scalanative.libc.stdlib._

/*
 *
 */

object Main {
  def main (args : Array [String]) = {
    fprintf(stdout, c"Test LLVM intrinsics memset memcpy and ...clib memcmp\n")
    
    val ptr1 : Ptr[Byte] = GC.malloc (10 + 1).cast[Ptr[Byte]]
    
    val ptr2 : Ptr[Byte] = GC.malloc (20 + 1).cast[Ptr[Byte]]
    
    // mymemset (ptr1, 'A'.toByte, 10)
    `llvm.memset.p0i8.i64` (ptr1, 'A'.toByte, 10, 1, false)    
    !(ptr1 + 10) = '\0'.toByte
    fprintf(stdout, c"ptr1: %s\n", ptr1)
    
    // mymemset (ptr2, 'B'.toByte, 20)
    `llvm.memset.p0i8.i64` (ptr2, 'B'.toByte, 20, 1, false)
    !(ptr2 + 20) = '\0'.toByte
    fprintf(stdout, c"ptr2: %s\n", ptr2)
    
    val d = `llvm.exp2.f64` (2.0)
    fprintf(stdout, c"d: %f\n", d)
        
    val ptr3 = ptr2 + 5    
    `llvm.memcpy.p0i8.p0i8.i64` (ptr3, ptr1, 10, 1, false)
    fprintf(stdout, c"ptr2: %s\n", ptr2)
    
    ()
  }
  
  def mymemset (ptr : Ptr[Byte], value : Byte, len : Int) {
    var c = 0
    
    while (c < len) {
      !(ptr + c) = value
      
      c += 1
    }
  }

}

